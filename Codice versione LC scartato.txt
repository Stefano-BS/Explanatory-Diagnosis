da elimina stato
    // for (r=statiSpazio[j=0]; j<nStatiS; r=statiSpazio[++j]) {                // Funziona, ma meno efficiente
    //     struct ltrans *trans = r->transizioni, *transPrima = NULL;
    //     while (trans != NULL) {
    //         if (trans->t->da == i || trans->t->a == i) {
    //             if (trans->t->da == i) nTransSp--;
    //             if (transPrima == NULL) {
    //                 //free(r->transizioni);
    //                 r->transizioni = trans->prossima;
    //                 trans = trans->prossima;
    //             } else {
    //                 transPrima->prossima = trans->prossima;
    //                 trans = trans->prossima;
    //                 //free(transPrima->prossima);
    //             }
    //         } else {
    //             transPrima = trans;
    //             trans = trans->prossima;
    //         }
    //     }
    // }


sezione stati in fila
		// if (tentra->dimRegex < strl1 + strl2 + 1) {
                //     char * nuovaReg = realloc(tentra->regex, (strl1+strl2+1)*2);
                //     tentra->dimRegex = (strl1+strl2+1)*2;
                //     tentra->regex = nuovaReg;
                // }
                // strcat(tentra->regex, tesce->regex);
                // if (strl1>0 & strl2>0) tentra->parentesizzata = false;
                // tentra->a = tesce->a;
                // struct ltrans *arrivo = statiSpazio[tentra->a]->transizioni;
                // statiSpazio[tentra->a]->transizioni = calloc(1, sizeof(struct ltrans));
                // statiSpazio[tentra->a]->transizioni->t = tentra;
                // statiSpazio[tentra->a]->transizioni->prossima = arrivo;

                // struct ltrans *tptr = statiSpazio[i]->transizioni, *tpprima = NULL;
                // while (tptr != NULL) {
                //     if (tptr->t->da != i && tptr->t->a != i) {
                //         if (tpprima == NULL) statiSpazio[i]->transizioni = tptr->prossima;
                //         else tpprima->prossima = tptr->prossima;
                //     }
                //     tptr = tptr->prossima;
                // }


sezione transizioni in alternativa
	    // struct ltrans *trans = statiSpazio[i]->transizioni, *nodoPrecedente = NULL;
            // TransizioneRete * prima = NULL;
            // while (trans != NULL) {
            //     TransizioneRete *tr = trans->t;
            //     if (prima == NULL && tr->a == i && tr->da != i) prima = tr;
            //     if (prima != NULL && prima != tr && tr->a == i && tr->da == prima->da) {
            //         int strl1 = strlen(prima->regex), strl2 = strlen(tr->regex);
            //         if (strl1 > 0 && strl1==strl2 && strcmp(prima->regex, tr->regex)==0);
            //         else if (strl1 > 0 && strl2 > 0) {
            //             if (prima->dimRegex < strl1 + strl2 + 4) {
            //                 char * nuovaReg = realloc(prima->regex, (strl1+strl2)*2+4);
            //                 prima->dimRegex = (strl1+strl2)*2+4;
            //                 prima->regex = nuovaReg;
            //             }
            //             sprintf(temp, "(%s|%s)", prima->regex, tr->regex);
            //             strcpy(prima->regex, temp);
            //             prima->parentesizzata = true;
            //         } else if (strl1 > 0 && strl2==0) {
            //             int deltaCaratteri;
            //             deltaCaratteri = prima->parentesizzata? 1 : 3;
            //             if (prima->dimRegex < strl1 + deltaCaratteri) {
            //                 char * nuovaReg = realloc(prima->regex, strl1*2+deltaCaratteri);
            //                 prima->dimRegex = strl1*2+deltaCaratteri;
            //                 prima->regex = nuovaReg;
            //                 prima->parentesizzata = true;
            //             }
            //             if (prima->parentesizzata) sprintf(temp, "%s?", prima->regex);
            //             else sprintf(temp, "(%s)?", prima->regex);
            //             strcpy(prima->regex, temp);
            //             prima->parentesizzata = true;  // Anche se non termina con ), non ha senso aggiungere ulteriori parentesi
            //         } else if (strl2 > 0) {
            //             int deltaCaratteri;
            //             deltaCaratteri = tr->parentesizzata? 1 : 3;
            //             if (prima->dimRegex < strl2 + deltaCaratteri) {
            //                 char * nuovaReg = realloc(prima->regex, (strl2)*2+deltaCaratteri);
            //                 prima->dimRegex = strl2*2+deltaCaratteri;
            //                 prima->regex = nuovaReg;
            //             }
            //             if (tr->parentesizzata) sprintf(prima->regex, "%s?", tr->regex);
            //             else sprintf(prima->regex, "(%s)?", tr->regex);
            //             prima->parentesizzata = true;  // Anche se non termina con ), non ha senso aggiungere ulteriori parentesi
            //         }
            //         //free(tr->regex);
            //         nodoPrecedente->prossima = trans->prossima;
            //         struct ltrans *listaNelNodoDiPartenza = statiSpazio[tr->da]->transizioni, *precedenteNelNodoDiPartenza = NULL;
            //         while (listaNelNodoDiPartenza != NULL) {
            //             if (listaNelNodoDiPartenza->t == tr) {
            //                 if (precedenteNelNodoDiPartenza == NULL) statiSpazio[tr->da]->transizioni = listaNelNodoDiPartenza->prossima;
            //                 else precedenteNelNodoDiPartenza->prossima = listaNelNodoDiPartenza->prossima;
            //                 break;
            //             }
            //             precedenteNelNodoDiPartenza = listaNelNodoDiPartenza;
            //             listaNelNodoDiPartenza = listaNelNodoDiPartenza->prossima;
            //         }
            //         trans = trans->prossima;
            //         nTransSp--;
            //         continua = true;
            //         continue;
            //     }
            //     nodoPrecedente = trans;
            //     trans = trans->prossima;
            // }